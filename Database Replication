import pandas as pd
from sqlalchemy import create_engine, MetaData, inspect
import logging

class DatabaseReplicator:
    def __init__(self, source_url, dest_url):
        self.source = create_engine(source_url)
        self.dest = create_engine(dest_url)
        self.logger = logging.getLogger(__name__)
    
    def get_tables(self):
        """Returns a list of all table names from the source database."""
        return inspect(self.source).get_table_names()
    
    def copy_schema(self, table_name):
        """Copies table schema from source to destination."""
        try:
            metadata = MetaData()
            metadata.reflect(bind=self.source, only=[table_name])
            metadata.create_all(self.dest)
        except Exception as e:
            self.logger.error(f"Schema copy failed for '{table_name}': {e}")
            raise
    
    def copy_data(self, table_name, chunk_size=10000):
        """Copies table data from source to destination in chunks."""
        query = f"SELECT * FROM {table_name}"
        total_rows = 0

        try:
            for chunk in pd.read_sql(query, self.source, chunksize=chunk_size):
                chunk.to_sql(table_name, self.dest, if_exists='append', index=False)
                total_rows += len(chunk)
            return total_rows
        except Exception as e:
            self.logger.error(f"Data copy failed for '{table_name}': {e}")
            raise
    
    def verify_integrity(self, table_name):
        """Compares row counts between source and destination tables."""
        count_query = f"SELECT COUNT(*) FROM {table_name}"
        try:
            source_count = pd.read_sql(count_query, self.source).iloc[0, 0]
            dest_count = pd.read_sql(count_query, self.dest).iloc[0, 0]
            return source_count == dest_count
        except Exception as e:
            self.logger.warning(f"Integrity check failed for '{table_name}': {e}")
            return False
    
    def replicate_all(self, verify=True):
        """Replicates all tables and optionally verifies row counts."""
        tables = self.get_tables()
        if not tables:
            print("No tables found in source database.")
            return
        
        successful = []
        failed = []
        total_rows = 0

        for table in tables:
            try:
                print(f"Copying '{table}'...")
                self.copy_schema(table)
                rows = self.copy_data(table)

                if verify and not self.verify_integrity(table):
                    print(f"Row count mismatch in '{table}'")

                successful.append(table)
                total_rows += rows
            except Exception as e:
                failed.append(table)
                print(f"Failed to replicate '{table}': {e}")
        
        print(f"\nReplication complete. Tables copied: {len(successful)}. Tables failed: {len(failed)}. Rows copied: {total_rows}.")
        
        return {
            'successful': successful,
            'failed': failed,
            'total_rows': total_rows
        }

# Example usage
if __name__ == "__main__":
    replicator = DatabaseReplicator(
        source_url="postgresql://user:pass@source/db",
        dest_url="postgresql://user:pass@dest/db"
    )
    result = replicator.replicate_all(verify=True)
